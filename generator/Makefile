#############################################################################
# Makefile for building: generator
# Generated by qmake (3.0) (Qt 5.7.0)
# Project:  generator.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile generator.pro
#############################################################################

MAKEFILE      = Makefile

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = 
CFLAGS        = -pipe -O2 -march=x86-64 -mtune=generic -O2 -pipe -Wall -W -D_REENTRANT -fPIC $(DEFINES)
CXXFLAGS      = -pipe -O2 -march=x86-64 -mtune=generic -O2 -pipe -std=gnu++11 -Wall -W -D_REENTRANT -fPIC $(DEFINES)
INCPATH       = -I.
QMAKE         = /usr/bin/qmake
DEL_FILE      = rm -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p
COPY          = cp -f
COPY_FILE     = cp -f
COPY_DIR      = cp -f -R
INSTALL_FILE  = install -m 644 -p
INSTALL_PROGRAM = install -m 755 -p
INSTALL_DIR   = cp -f -R
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
TAR           = tar -cf
COMPRESS      = gzip -9f
LINK          = g++
LFLAGS        = -Wl,-O1 -Wl,-O1,--sort-common,--as-needed,-z,relro
LIBS          = 
AR            = ar cqs
RANLIB        = 
SED           = sed
STRIP         = strip

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp \
		configuration.cpp \
		input_recognizer.cpp \
		exception_input.cpp \
		generator_abstract.cpp \
		task.cpp \
		generator.cpp \
		output_writer.cpp 
OBJECTS       = main.o \
		configuration.o \
		input_recognizer.o \
		exception_input.o \
		generator_abstract.o \
		task.o \
		generator.o \
		output_writer.o
QMAKE_TARGET  = generator
DESTDIR       = 
TARGET        = generator


first: all
####### Build rules

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

all: Makefile $(TARGET)

clean: compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core

####### Sub-libraries

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

check: first

benchmark: first

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

main.o: main.cpp all.h \
		configuration.h \
		exception_input.h \
		generator_abstract.h \
		task.h \
		generator.h \
		input_recognizer_abstract.h \
		input_recognizer.h \
		output_writer.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

configuration.o: configuration.cpp configuration.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o configuration.o configuration.cpp

input_recognizer.o: input_recognizer.cpp input_recognizer.h \
		exception_input.h \
		input_recognizer_abstract.h \
		configuration.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o input_recognizer.o input_recognizer.cpp

exception_input.o: exception_input.cpp exception_input.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o exception_input.o exception_input.cpp

generator_abstract.o: generator_abstract.cpp generator_abstract.h \
		configuration.h \
		task.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o generator_abstract.o generator_abstract.cpp

task.o: task.cpp task.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o task.o task.cpp

generator.o: generator.cpp generator.h \
		generator_abstract.h \
		configuration.h \
		task.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o generator.o generator.cpp

output_writer.o: output_writer.cpp output_writer.h \
		task.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o output_writer.o output_writer.cpp

####### Install

install:  FORCE

uninstall:  FORCE

FORCE:

